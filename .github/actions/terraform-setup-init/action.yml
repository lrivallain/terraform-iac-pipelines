# .github/actions/terraform-setup-init/action.yml
name: 'Complete Terraform Setup and Init'
description: 'Setup Terraform, authenticate with Azure, and initialize with backend'

inputs:
  azure-client-id:
    description: 'Azure Client ID'
    required: true
  azure-tenant-id:
    description: 'Azure Tenant ID'
    required: true
  azure-subscription-id:
    description: 'Azure Subscription ID'
    required: true
  working-directory:
    description: 'Terraform working directory'
    required: false
    default: './terraform'
  environment:
    description: 'Target environment (dev, prod, staging)'
    required: true
  storage-account-suffix:
    description: 'Random suffix for storage account name'
    required: true
  resource-group-name:
    description: 'Resource group name for state storage'
    required: false
    default: 'rg-terraform-state'
  container-name:
    description: 'Storage container name for state'
    required: false
    default: 'iac-workshop-tfstates'
  terraform-version:
    description: 'Terraform version to install'
    required: false
    default: 'latest'

runs:
  using: 'composite'
  steps:
    - name: Azure Login using OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.azure-client-id }}
        tenant-id: ${{ inputs.azure-tenant-id }}
        subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform-version }}

    - name: Verify Azure Access
      shell: bash
      run: |
        echo "Testing Azure access..."

        # Test Azure CLI authentication
        az account show > /dev/null

        # Test Key Vault access with retry
        KV_NAME=$(az keyvault list --query "[?contains(name, 'webapp-${{ inputs.environment }}')].name" -o tsv | head -1)

        if [ ! -z "$KV_NAME" ]; then
          echo "Testing Key Vault: $KV_NAME"

          for i in {1..10}; do
            if az keyvault secret list --vault-name "$KV_NAME" --max-results 1 > /dev/null 2>&1; then
              echo "Key Vault access OK"
              break
            else
              echo "Attempt $i/10 failed, waiting..."
              sleep $((i * 5))
              if [ $i -eq 10 ]; then
                echo "Key Vault access failed after 10 attempts"
                exit 1
              fi
            fi
          done
        fi

    - name: Terraform Init with Backend
      shell: bash
      run: |
        terraform init \
          -backend-config="storage_account_name=tfstates${{ inputs.storage-account-suffix }}" \
          -backend-config="container_name=${{ inputs.container-name }}" \
          -backend-config="key=terraform-${{ inputs.environment }}.tfstate" \
          -backend-config="resource_group_name=${{ inputs.resource-group-name }}"
      working-directory: ${{ inputs.working-directory }}