# .github/actions/terraform-deploy/action.yml
name: 'Terraform Deploy'
description: 'Deploy Terraform configuration with plan verification'

inputs:
  working-directory:
    description: 'Terraform working directory'
    required: false
    default: './terraform'
  environment:
    description: 'Target environment (dev, prod)'
    required: true
  storage-account-suffix:
    description: 'Random suffix for storage account name'
    required: true
  azure-client-id:
    description: 'Azure Client ID'
    required: true
  azure-tenant-id:
    description: 'Azure Tenant ID'
    required: true
  azure-subscription-id:
    description: 'Azure Subscription ID'
    required: true
  use-existing-plan:
    description: 'Whether to use existing plan artifact'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Setup Terraform and Azure
      uses: ./.github/actions/setup-terraform-azure
      with:
        azure-client-id: ${{ inputs.azure-client-id }}
        azure-tenant-id: ${{ inputs.azure-tenant-id }}
        azure-subscription-id: ${{ inputs.azure-subscription-id }}

    - name: Terraform Init
      shell: bash
      run: |
        terraform init \
          -backend-config="storage_account_name=tfstates${{ inputs.storage-account-suffix }}" \
          -backend-config="container_name=iac-workshop-tfstates" \
          -backend-config="key=terraform-${{ inputs.environment }}.tfstate" \
          -backend-config="resource_group_name=rg-terraform-state"
      working-directory: ${{ inputs.working-directory }}

    - name: Download Plan (if using existing)
      if: inputs.use-existing-plan == 'true'
      uses: actions/download-artifact@v4
      with:
        name: tfplan-${{ inputs.environment }}
        path: ${{ inputs.working-directory }}/

    - name: Terraform Plan (if not using existing)
      if: inputs.use-existing-plan == 'false'
      shell: bash
      run: terraform plan -var-file="environments/${{ inputs.environment }}/terraform.tfvars" -out=plan.tfout
      working-directory: ${{ inputs.working-directory }}

    - name: Terraform Apply
      shell: bash
      run: terraform apply plan.tfout
      working-directory: ${{ inputs.working-directory }}