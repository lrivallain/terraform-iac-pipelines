# .github/actions/terraform-comment/action.yml
name: 'Terraform Plan Comment'
description: 'Download terraform plan, generate summary, and comment on PR'

inputs:
  azure-client-id:
    description: 'Azure Client ID'
    required: true
  azure-tenant-id:
    description: 'Azure Tenant ID'
    required: true
  azure-subscription-id:
    description: 'Azure Subscription ID'
    required: true
  working-directory:
    description: 'Terraform working directory'
    required: false
    default: './terraform'
  environment:
    description: 'Target environment (dev, prod, staging)'
    required: true
  storage-account-suffix:
    description: 'Random suffix for storage account name'
    required: true
  comment-title:
    description: 'Title for the comment (e.g., Development Environment Plan)'
    required: true
  comment-emoji:
    description: 'Emoji for the comment title'
    required: false
    default: '🏗️'
  deployment-type:
    description: 'Deployment type description (e.g., Automatic upon merge)'
    required: true
  show-warning:
    description: 'Whether to show production warning'
    required: false
    default: 'false'
  github-token:
    description: 'GitHub token for commenting'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Download Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan-${{ inputs.environment }}
        path: ${{ inputs.working-directory }}/

    - name: Setup Terraform and Init
      uses: ./.github/actions/terraform-setup-init
      with:
        azure-client-id: ${{ inputs.azure-client-id }}
        azure-tenant-id: ${{ inputs.azure-tenant-id }}
        azure-subscription-id: ${{ inputs.azure-subscription-id }}
        working-directory: ${{ inputs.working-directory }}
        environment: ${{ inputs.environment }}
        storage-account-suffix: ${{ inputs.storage-account-suffix }}

    - name: Generate Plan Summary
      shell: bash
      run: |
        echo "## ${{ inputs.comment-emoji }} ${{ inputs.comment-title }}" > plan-summary.md
        echo "" >> plan-summary.md
        echo "**Environment:** ${{ inputs.environment }}" >> plan-summary.md
        echo "**Commit:** ${{ github.sha }}" >> plan-summary.md
        echo "**Deployment:** ${{ inputs.deployment-type }}" >> plan-summary.md
        echo "" >> plan-summary.md

        # Add warning for production
        if [ "${{ inputs.show-warning }}" = "true" ]; then
          echo "⚠️ **This shows what will happen in production after merge and approval**" >> plan-summary.md
          echo "" >> plan-summary.md
        fi

        # Check if there are changes
        if terraform show -no-color plan.tfout | head -1 | grep -q "No changes"; then
          echo "✅ **No changes** - Infrastructure matches configuration" >> plan-summary.md
        else
          # Check for high-risk operations (only for production-like environments)
          if [ "${{ inputs.environment }}" = "prod" ] || [ "${{ inputs.environment }}" = "production" ]; then
            if terraform show -no-color plan.tfout | grep -E "(destroy|force-replace)" > /dev/null; then
              echo "🔴 **HIGH RISK CHANGES DETECTED**" >> plan-summary.md
              echo "This change includes resource destruction or replacement!" >> plan-summary.md
              echo "" >> plan-summary.md
            fi
          fi

          echo "### Changes Preview:" >> plan-summary.md
          echo '```hcl' >> plan-summary.md
          terraform show -no-color plan.tfout | head -50 >> plan-summary.md
          echo '```' >> plan-summary.md
        fi

        # Add footer for production
        if [ "${{ inputs.environment }}" = "prod" ] || [ "${{ inputs.environment }}" = "production" ]; then
          echo "" >> plan-summary.md
          echo "**Review carefully before approving production deployment!**" >> plan-summary.md
        fi
      working-directory: ${{ inputs.working-directory }}

    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('${{ inputs.working-directory }}/plan-summary.md', 'utf8');

          // Check for existing comment
          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });

          const existingComment = comments.data.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('${{ inputs.comment-title }}')
          );

          if (existingComment) {
            await github.rest.issues.updateComment({
              comment_id: existingComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: plan
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: plan
            });
          }