# .github/workflows/terraform-multi-env.yml
name: 'Multi-Environment Terraform Deployment'

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'

permissions:
  id-token: write
  contents: read

env:
  TF_WORKING_DIR: './terraform'

jobs:
  # Validate on all events (push and PR)
  validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform and Azure
      uses: ./.github/actions/setup-terraform-azure
      with:
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="storage_account_name=tfstates${{ vars.RANDOM_SUFFIX }}" \
          -backend-config="container_name=iac-workshop-tfstates" \
          -backend-config="key=terraform-dev.tfstate" \
          -backend-config="resource_group_name=rg-terraform-state"
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Format Check
      run: terraform fmt -check=true -diff=true -recursive
      working-directory: ${{ env.TF_WORKING_DIR }}

  # Plan for both environments
  plan-dev:
    needs: validate
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform and Azure
      uses: ./.github/actions/setup-terraform-azure
      with:
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="storage_account_name=tfstates${{ vars.RANDOM_SUFFIX }}" \
          -backend-config="container_name=iac-workshop-tfstates" \
          -backend-config="key=terraform-dev.tfstate" \
          -backend-config="resource_group_name=rg-terraform-state"
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Plan Dev
      run: terraform plan -var-file="environments/dev/terraform.tfvars" -out=plan.tfout
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Show Plan
      run: terraform show -no-color plan.tfout
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Save Dev Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-dev
        path: ${{ env.TF_WORKING_DIR }}/plan.tfout
        retention-days: 5

  plan-prod:
    needs: validate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform and Azure
      uses: ./.github/actions/setup-terraform-azure
      with:
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="storage_account_name=tfstates${{ vars.RANDOM_SUFFIX }}" \
          -backend-config="container_name=iac-workshop-tfstates" \
          -backend-config="key=terraform-prod.tfstate" \
          -backend-config="resource_group_name=rg-terraform-state"
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Plan Prod
      run: terraform plan -var-file="environments/prod/terraform.tfvars" -out=plan.tfout
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Show Plan
      run: terraform show -no-color plan.tfout
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Save Prod Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-prod
        path: ${{ env.TF_WORKING_DIR }}/plan.tfout
        retention-days: 5

  # Auto-deploy to DEV on push to main
  deploy-dev:
    needs: [plan-dev]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: development  # No approval required
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Deploy to Development
      uses: ./.github/actions/terraform-deploy
      with:
        working-directory: ${{ env.TF_WORKING_DIR }}
        environment: 'dev'
        storage-account-suffix: ${{ vars.RANDOM_SUFFIX }}
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        use-existing-plan: 'true'

    - name: Post-deployment validation
      run: |
        echo "üéâ Development deployment completed successfully!"
        echo "Environment: Development"
        echo "Timestamp: $(date)"
        echo "Commit: ${{ github.sha }}"

  # Deploy to PROD with manual approval
  deploy-prod:
    needs: [plan-prod, deploy-dev]  # Requires dev deployment success
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production  # Requires manual approval
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Pre-deployment notification
      run: |
        echo "üöÄ Starting PRODUCTION deployment"
        echo "‚ö†Ô∏è  This deployment affects production systems"
        echo "Reviewer: ${{ github.triggering_actor }}"
        echo "Commit: ${{ github.sha }}"
        echo "Changes: ${{ github.event.head_commit.message }}"

    - name: Deploy to Production
      uses: ./.github/actions/terraform-deploy
      with:
        working-directory: ${{ env.TF_WORKING_DIR }}
        environment: 'prod'
        storage-account-suffix: ${{ vars.RANDOM_SUFFIX }}
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        use-existing-plan: 'true'

    - name: Post-deployment validation
      run: |
        echo "‚úÖ Production deployment completed successfully!"
        echo "Environment: Production"
        echo "Timestamp: $(date)"
        echo "Commit: ${{ github.sha }}"
        echo "Approved by: ${{ github.triggering_actor }}"

    - name: Notify deployment success
      run: |
        echo "üéâ PRODUCTION DEPLOYMENT SUCCESSFUL üéâ"
        echo "All systems are updated and running"
        # Add notification to Slack/Teams/Email here if needed